# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 branches:
   include:
     - prj/demo
 paths:
  exclude:
    - '**/*.yml'
    - '**/*.yaml'
    - readme.md


pr: none

# resources:
#  repositories:
#    - repository: testAzureDevopsSetup
#      type: git
#      name : testAzureDevopsSetup

# parameters:
#   env: $(environmentName)
#   tokenName: $(environmentName)Token.json
#   runTestClasses: $(runTestClasses)


jobs:
- deployment: ValidateAndDeployment
  displayName: Validate and deployment
  pool:
    vmImage: ubuntu-latest
  environment: 
   name: $(environmentName)
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
          fetchDepth: full
          persistCredentials: true
        - task: NodeTool@0 
          inputs:
            versionSpec: '18.x'
        - task: DownloadSecureFile@1
          name: SalesforceToken
          displayName: 'Download auth file for SFDX'
          inputs:
            secureFile: $(environmentName)Token.json
        - script: |
            echo "*******SOURCE_BRANCH_NAME****************"
            sourceBranch=$(echo "prj/""$BRANCH_NAME" | sed 's|refs/heads/||g')
            echo "##vso[task.setvariable variable=sourceBranch;]$sourceBranch"
            echo "$sourceBranch"
            echo "*****************************************"
            curl -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" -X GET -L "https://dev.azure.com/suvam1999roy/Azure%20Devops%20Test/_apis/build/latest/$(System.DefinitionId)?branchName=$sourceBranch&api-version=7.0-preview.1" -o sourceVersionResponse.json
            echo "************************"
            cat sourceVersionResponse.json
            echo "************************"
            if cat sourceVersionResponse.json | grep -o '"result":"[^"]*' | grep -o '[^"]*$' | grep -q succeeded; then
              latestBuildCommit=$(cat sourceVersionResponse.json | grep -o '"sourceVersion":"[^"]*' | grep -o '[^"]*$')
              echo "Last build succeeded, commit set to latest deployed to environment: $latestBuildCommit"
              echo "##vso[task.setvariable variable=latestBuildCommit]$latestBuildCommit"
            else
              latestBuildCommit=$(commitID)
              echo "Last build failed or error, commit set to initial one from branch $BRANCH_NAME and its $latestBuildCommit"
              echo "##vso[task.setvariable variable=latestBuildCommit]$latestBuildCommit"
            fi
          displayName: "Download latest build commit for environment"
          env:
              BRANCH_NAME: $(Build.SourceBranchName)
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - script: |
            if ! command -v sfdx &> /dev/null
              then
                  echo "SFDX Not found, installing..."
                  npm install -g sfdx-cli --loglevel verbose
                  echo y | sf plugins install sfdx-git-delta
                  # echo y | sfdx plugins:install @salesforce/sfdx-scanner
              else
                  echo "SFDX installed."
            fi
          displayName: "Install SFDX and SDG"
        - script: |
            sf org login sfdx-url -f $(SalesforceToken.secureFilePath) -a $(environmentName)
          displayName: "Salesforce Login"
        - script: |
            SOURCE_PATTERNS="force-app/main/default,force-app-target/qa"
            sf sgd source delta --to HEAD --from $(latestBuildCommit) -o .  --ignore-file devops/gitignore/.fileIgnore
            mv package/package.xml manifest/package.xml
            echo "*********PACKAGE.XML******************"
            cat manifest/package.xml
            echo "**************************************"
          displayName: "Create a Manifest"
        - script: |
            xml_file="manifest/package.xml"

            # Use grep to search for "<types>" in the XML file

            if grep -q "<types>" "$xml_file"; then
                echo "Deploying metadata to org..."
                sf project deploy start -x manifest/package.xml --target-org $(environmentName) --ignore-conflicts
                echo "Running Destructive changes..."
                sf project deploy start --manifest ./destructiveChanges/package.xml --post-destructive-changes ./destructiveChanges/destructiveChangesPost.xml --target-org practice123@pwc.com --ignore-warnings 
            else
                echo "Running Destructive changes..."
                sf project deploy start --manifest ./destructiveChanges/package.xml --post-destructive-changes ./destructiveChanges/destructiveChangesPost.xml --target-org practice123@pwc.com --ignore-warnings 
            fi
            # if [ $(runTestClasses) = "true" ]; then
            #   echo "runTestClasses variable set to true, running build with test classes"
            #   sfdx force:source:deploy -l RunLocalTests -x manifest/package.xml --targetusername $(environmentName)
            # else
            #   sfdx force:source:deploy -x manifest/package.xml --targetusername $(environmentName)
            # fi
          displayName: "Deploy to environment Or Run Destructive Changes"
        # - script: |
        #       sfdx force:source:deploy --manifest ./destructiveChanges/package.xml --postdestructivechanges ./destructiveChanges/destructiveChangesPost.xml -u practice123@pwc.com --ignorewarnings 
            
        #   displayName: "Run Destructive Changes"
        - script: |
            if [ $(environmentName) = "PROD" ]; then
              ver="$(environmentName)-$(date '+%d-%m-%Y-%H-%M')"
              echo "Deployment to $(environmentName), creating and pushing TAG $ver"
              git tag "$ver"
              git push origin "$ver"
            else
              echo "Nothing to tag"
            fi
          displayName: "Create TAG for succesfull release"
